#!/bin/env python

import argparse, os
import numpy as np
from hfutil import HFUtil

parser = argparse.ArgumentParser()

parser.add_argument('INPUT', type=str,
        help='input BDF or HEX file with 6/3/1 johab hangul base glyphs')
parser.add_argument('OUTPUT', type=str,
        help='output BDF, HEX or PNG file')
parser.add_argument('-a', dest='ASCII', type=str,
        help='input BDF or HEX file with ascii glyphs')
parser.add_argument('-c', dest='CHARS', type=str,
        help='[basegbc|basegbv|han1764|han2350|han11172|han11250] or TXT file')
parser.add_argument('-j', dest='JSON', type=str,
        help='output JSON file for minecraft resource pack')
parser.add_argument('-w', dest='WIDTH', type=int, default=16,
        help='width of glyphs used to generate sample image (default: 16)')
parser.add_argument('-x', dest='XSHIFT', type=int, default=0,
        help='move all glyphs XSHIFT pixels to right (+) or left (-)')
parser.add_argument('-y', dest='YSHIFT', type=int, default=0,
        help='move all glyphs YSHIFT pixels to top (+) or bottom (-)')
args = parser.parse_args()


glyphs = HFUtil(args.INPUT, xshift=args.XSHIFT, yshift=args.YSHIFT, width=args.WIDTH)

if (args.ASCII):
    glyphs.read(args.ASCII, range=(0x20, 0x7F))

if args.CHARS:
    glyphs.rearange_base()

if not args.CHARS:
    glyphs.export(args.OUTPUT)

elif args.CHARS == 'basegbc':
    text = [''.join([chr(i) for i in range(j, j+0x10)]) for j in range(0xF000, 0xF100, 0x10)]
    glyphs.export(args.OUTPUT, text)

elif args.CHARS == 'basegbv':
    text = [''.join([chr(i) for i in range(j, j+0x10)]) for j in range(0xF100, 0xF200, 0x10)]
    glyphs.export(args.OUTPUT, text)

elif args.CHARS == 'han1764':
    text1 = [''.join([chr(i) for i in range(j, ord('힣'), 588)]) for j in range(ord('가'), ord('까'), 28)]
    text2 = [''.join([chr(i) for i in range(j, ord('힣'), 588)]) for j in range(ord('간'), ord('깍'), 28)]
    text3 = [''.join([chr(i) for i in range(j, ord('힣'), 588)]) for j in range(ord('강'), ord('깡'), 28)]
    text4 = [''.join([chr(i) for i in range(j, j+27)]) for j in range(ord('악'), ord('작'), 28)]
    text = [' '.join(t) for t in zip(text1, text2, text3)] + [''] + text4
    glyphs.export(args.OUTPUT, text, 2)

elif args.CHARS == 'han2350':
    text = [bytes((a,b)).decode('EUC-KR') for a in range(0xB0, 0xC9) for b in range(0xA1, 0xFF)]
    text = [''.join(text[i:i+50]) for i in range(0, len(text), 50)]
    glyphs.export(args.OUTPUT, text, rgba=args.JSON)

elif args.CHARS in ['han11172', 'han11250']:
    text = []
    for i in [4] if args.CHARS == '11172' else [2, 3, 4]:
        text += [chr(j) for j in range(*glyphs.hangul[i])]
    text = [''.join(text[i:i+150]) for i in range(0, len(text), 150)]
    glyphs.export(args.OUTPUT, text, rgba=args.JSON)

elif args.CHARS == 'full':
    text = ''.join(sorted(chr(c) for c in glyphs.keys() if c <= 0xE000))
    for i in range(5):
        text += ''.join([chr(j) for j in range(*glyphs.hangul[i])])
    glyphs.export(args.OUTPUT, text, rgba=args.JSON)

elif os.path.isfile(args.CHARS):
    with open(args.CHARS) as f:
        glyphs.export(args.OUTPUT, f.readlines(), 4)

if args.JSON:
    glyphs.json(args.JSON, args.OUTPUT, text)
